import com.github.spotbugs.snom.SpotBugsTask

/*
 * Copyright 2020-2023 Cyface GmbH
 *
 * This file is part of the Cyface Uploader.
 *
 *  The Cyface Uploader is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  The Cyface Uploader is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with the Cyface Uploader.  If not, see <http://www.gnu.org/licenses/>.
 */
/**
 * The build gradle file for the Cyface Serialization.
 *
 * @author Armin Schnabel
 * @version 1.0.0
 * @since 1.0.0
 */
buildscript {
  ext.kotlin_version = "1.7.10"

  repositories {
    mavenCentral()
  }
  dependencies {
    classpath "gradle.plugin.com.github.spotbugs.snom:spotbugs-gradle-plugin:4.7.5"
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
  }
}

plugins {
  id 'eclipse'
  id 'idea'
  //noinspection SpellCheckingInspection
  id 'com.github.johnrengelman.shadow' version '7.1.2' apply false
  id "com.github.spotbugs" version "4.7.5"
  // Plugin to display the Gradle task graph
  //noinspection SpellCheckingInspection
  id 'org.barfuin.gradle.taskinfo' version '2.1.0'

  id 'java'
  id 'java-library'
  id 'maven-publish'
  id 'org.jetbrains.kotlin.jvm' version '1.7.10'

  id 'jacoco'
  id 'checkstyle'
  id 'pmd'
}

repositories {
  mavenCentral()
}

group = 'de.cyface'
version = "0.0.0" // Automatically overwritten by CI

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'

  sourceCompatibility = JavaVersion.VERSION_11
  targetCompatibility = JavaVersion.VERSION_11

  checkstyle {
    toolVersion = '8.31'
    // use one common config file for all subprojects
    configFile = project(':').file("config/checkstyle/checkstyle.xml")
    //noinspection SpellCheckingInspection
    configProperties = ["suppressionFile": project(':').file("config/checkstyle/suppressions.xml")]
    ignoreFailures = true
    showViolations = true
  }
}

ext {
  slf4jVersion = '2.0.7'
  gradleWrapperVersion = '7.6.1'
  cyfaceSerializationVersion = '2.3.7-alpha1' // FIXME
  googleApiClientVersion = '2.2.0' // transmission protocol

  // Versions of testing dependencies
  junitVersion = '5.9.2'
  mockitoVersion = '5.2.0'
  hamcrestVersion = '2.2'
  flapdoodleVersion = '4.6.1'

  jacocoVersion = '0.8.9'
  spotBugsPluginVersion = '1.12.0'
  spotbugsToolsVersion = '4.7.3'
  pmdToolsVersion = '6.55.0'
}

wrapper {
  gradleVersion = "$gradleWrapperVersion"
}

compileKotlin {
  kotlinOptions {
    jvmTarget = "11"
  }
}
compileTestKotlin {
  kotlinOptions {
    jvmTarget = "11"
  }
}

dependencies {
  // Kotlin
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version" // there is no stdlib-jdk11

  // Upload
  implementation "de.cyface:serializer:$rootProject.ext.cyfaceSerializationVersion"
  implementation "com.google.api-client:google-api-client:$rootProject.ext.googleApiClientVersion"

  // Other
  implementation "org.slf4j:slf4j-api:$slf4jVersion"

  // Testing Dependencies
  testImplementation(platform("org.junit:junit-bom:$junitVersion"))
  testImplementation "org.junit.jupiter:junit-jupiter-params"  // Required for parameterized tests
  testImplementation "org.hamcrest:hamcrest:$hamcrestVersion"
  testImplementation "org.mockito:mockito-core:$mockitoVersion"
  testImplementation "org.mockito:mockito-junit-jupiter:$mockitoVersion"
  testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"

  spotbugsPlugins "com.h3xstream.findsecbugs:findsecbugs-plugin:$spotBugsPluginVersion"
}

test {
  useJUnitPlatform()
  testLogging {
    events "passed", "skipped", "failed"

    // Also show assert message (e.g. on the CI) when tests fail to identify cause
    showExceptions true
    exceptionFormat "full"
    showCauses false // not working with vertx fail() so we disable this
    showStackTraces false
    showStandardStreams = false
  }
}

jacoco {
  toolVersion = "$jacocoVersion"
  reportsDir = file("$buildDir/reports/jacoco")
}

jacocoTestReport {
  reports {
    xml.enabled true
    csv.enabled true
    html.destination file("${buildDir}/reports/jacocoHtml")
  }
}

spotbugs {
  toolVersion = "$spotbugsToolsVersion"
  ignoreFailures = true
  excludeFilter = file("$rootProject.projectDir/config/spotbugs/excludeFilter.xml")
}

tasks.withType(SpotBugsTask) {
  reports {
    xml.enabled = false
    html.enabled = true
  }
  //pluginClasspath = project.configurations.spotbugsPlugins
}

// After hours of trying to fix local `./gradlew check` execution only this helped [DAT-803]
// (https://github.com/spotbugs/spotbugs-gradle-plugin/issues/32#issuecomment-779661275)
/*gradle.taskGraph.beforeTask { task ->
  if (task.name.toLowerCase().contains('spotbugs')) {
    task.reports {
      xml.enabled = false
      html.enabled = true
    }
  }
}*/

pmd {
  toolVersion = "$pmdToolsVersion"
  incrementalAnalysis = true
  ruleSetFiles = project(':').files('config/pmd.xml')
  rulesMinimumPriority = 4
  ruleSets = []
  // There are so many violations and currently it is not really important in this application.
  ignoreFailures = true
}

// Definitions for the maven-publish Plugin
publishing {
  // The following repositories are used to publish artifacts to.
  repositories {
    maven {
      name = 'github'
      url = uri("https://maven.pkg.github.com/cyface-de/uploader")
      credentials {
        username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
        password = project.findProperty("gpr.key") ?: System.getenv("PASSWORD")
      }
    }
    maven {
      name = 'local'
      url = "file://${rootProject.buildDir}/repo"
    }
  }
}

// The following repositories are used to load artifacts from.
repositories {
  maven {
    name = 'local'
    url = "file://${rootProject.buildDir}/repo"
  }
  maven {
    name = "github-serializer"
    url = uri("https://maven.pkg.github.com/cyface-de/serializer")
    credentials {
      username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
      password = project.findProperty("gpr.key") ?: System.getenv("PASSWORD")
    }
  }
}

// The following needs to be wrapped in afterEvaluate. I have no idea why, but the solution is described here: https://github.com/akhikhl/gretty/issues/306
project.afterEvaluate {

  java {
    withJavadocJar()
    withSourcesJar()
  }

  // Publish sources
  task sourceJar(type: Jar) {
    from sourceSets.main.allJava
  }

  // This is the configuration of the maven-publish plugin. It defines a publication
  publishing {
    publications {
      //noinspection GroovyAssignabilityCheck
      myLibrary(MavenPublication) {
        //noinspection GroovyAssignabilityCheck
        from components.java
      }
    }
  }
}
